#!/usr/bin/env python3
"""
This script uses streamlit to provide an app-like interface
enabling some interaction with the vizualisations
"""
import pandas as pd
import streamlit as st
import requests
import os
import plotly.express as px
from datetime import datetime
import company_cleaning
import sector_cleaning
import tab3_4

API_BASE_URL = os.environ['API_BASE_URL']

if 'access_token' not in st.session_state:
    st.session_state['access_token'] = None

headers = {"Authorization": f"Bearer {st.session_state['access_token']}"}


def run():
    with st.sidebar:

        def fetch_full_table(endpoint):
            response = requests.get(f"{API_BASE_URL}/{endpoint}", headers=headers)
            return pd.DataFrame(response.json())

        st.sidebar.header("Les donn√©es derri√®res ces visualisations")
        side_bar = f'''
        Comme vous pourrez le lire dans notre [rapportüö® version pdf √† mettre avant soutenance‚ö†Ô∏è](https://docs.google.com/document/d/1RdEme_BMk8fh_ZRzwjCSCIh9AFD4mGTBaRY09J685dA/edit?usp=sharing), nous avons cr√©√© 7 tables : 
        - Companies
        - Job Offers
        - JobOffer_Skills
        - Locations
        - Skills
        - Sources
        - Users
        \n
        Pour les voir directement dans notre base de donn√©es'''
        st.write(side_bar)
        st.link_button("rendez-vous sur PGAdmin","http://localhost:8888/",type='primary')
        end = ''' avec les identifiants fournis dans le fichier _.env_.  \n'''
        st.write(end)


    titre = "Projet Jobmarket : les offres d'emplois pour Data Engineers en France"
    st.title(titre)

    introduction = '''
    Dans le cadre de la [formation de Data Engineer par DataScientest](https://datascientest.com/formation-data-engineer) au format bootcamp de janvier √† avril 2024, nous avons eu l'occasion de r√©aliser un projet en groupe.  
    Voici le r√©sultat de nos recherches sur les **offres d\'emplois de Data Engineer publi√©es en France au cours des 30 derniers jours** *.  
    Au total nous avons r√©colt√© **1 342 annonces** soit sur [Welcome to The Jungle](https://www.welcometothejungle.com/en) soit via l'[API d'Adzuna](https://www.adzuna.fr), deux aggr√©gateurs.  
    Notre objectif est de r√©pondre √† ces **5 questions** :   
    - quels **secteurs** recrutent le plus ?   
    - combien d\'**entreprises** par secteur ont publi√© des annonces ?   
    - quelles sont les **comp√©tences** les plus demand√©es ?  
    - quel est le **contrat** majoritairement propos√© dans les annonces ?  
    - quelle est la **r√©partition g√©ographique** de ces offres ?  
      \n _(*) √† la date du 24 f√©vrier 2024_'''
    st.markdown(introduction)


    tab0, tab1, tab2, tab3, tab4, tab5 = st.tabs(["Les secteurs qui recrutent",
                                            "Les entreprises par secteurs",
                                            "Les comp√©tences recherch√©es",
                                            "Les contrats propos√©s",
                                            "Les villes concern√©es", "‚Ä¶ et les dataframe bruts"])

    with tab0:
        #st.header("Quels secteurs recrutent le plus ?")

        company_cleaning.total_offres_par_secteur

        #
        def update_pie():
            """
            Fonction pour mettre √† jour le graphique circulaire en fonction du nombre
            de secteurs s√©lectionn√©s par l'utilisateur.
            """
            top_number = st.session_state.input_number
            # S√©lectionner des n premiers secteurs les plus fr√©quents
            top_sectors = company_cleaning.total_offres_par_secteur.head(top_number)
            
            # Cr√©er le diagramme circulaire avec Plotly Express
            fig1 = px.pie(
                names=top_sectors.index,  # Noms des secteurs
                values=top_sectors.values,  # Nombre d'offres par secteur
                title=f'Top {top_number} des secteurs qui recrutent',
                color_discrete_sequence=px.colors.sequential.Viridis
            )

            st.plotly_chart(fig1)


        col1, col2, col3 = st.columns(3)

        with col1:
            st.write("Vous voulez voir le top")

        with col2:
            top_sectors = st.number_input("Top", min_value=0, max_value=10, value=3,
                                        step=1, key="input_number",
                                        label_visibility="collapsed",
                                        on_change=update_pie)

        with col3:
            st.write("des secteurs qui recrutent")


        update_pie()

    with tab1:
        st.header("Combien d'entreprises par secteur ont publi√© des annonces ?")
        sector_cleaning.sectors_counts
        fig2 = px.bar(
            x=sector_cleaning.sectors_counts.index, 
            y=sector_cleaning.sectors_counts.values,
            title='Nombre d\'entreprises par secteur', 
            labels={'x': 'SECTEUR', 'y': 'Nombre d\'entreprises'},
            color=sector_cleaning.sectors_counts.values,
            color_continuous_scale=px.colors.sequential.Viridis
        )
        # Affichage du graphique 
        st.plotly_chart(fig2)

    with tab2:
        #st.header("Quelles sont les comp√©tences les plus demand√©es ?")

        def fetch_data_skills(endpoint):
            response = requests.get(
                f"{API_BASE_URL}/{endpoint}",
                headers=headers
            )
            return pd.DataFrame(response.json(), columns=['skillname', 'nb_count'])

        df = fetch_data_skills("joboffer_skills/most-demanded-skills").head(15)
        fig = px.bar(df, x='skillname', y='nb_count', 
                    title='Top 15 des comp√©tences les plus demand√©es',
                    labels={'skillname': 'Comp√©tence', 'nb_count': 'Nombre de demandes'},
                    color='nb_count', color_continuous_scale=px.colors.sequential.Viridis)
        st.plotly_chart(fig)

    with tab3:
        #st.header("Quel est le contrat majoritairement propos√© dans les annonces ?")
        col0, col1 = st.columns(2)
        all_contracts = tab3_4.fetch_data_contract("joboffers_contracts")
        
        with col0:
            # Worth mentionning, the nunique() method does NOT include the None values
            st.write(f"  \n Initialement, les {all_contracts.number_offer.sum():,} annonces* r√©cup√©r√©es sont r√©parties en {all_contracts['contracttype'].nunique()} types de contrats possibles.\n".replace(',', ' '))
            unspecified_contracts = all_contracts.loc[all_contracts.contracttype.isnull(), ['number_offer']].values[0]

            all_contracts['contracttype'] = all_contracts['contracttype'].apply(lambda x : tab3_4.sort_contracttypes(x))
            unspecified_contracts += all_contracts.contracttype.isnull().sum()
            known_contracts = all_contracts.dropna(subset = ['contracttype'])
            result = known_contracts.groupby('contracttype')['number_offer'].sum().reset_index()
            result.sort_values('number_offer', inplace=True, ascending=False)
            details = f'''
            Pour une meilleure lisibilit√©, nous les avons rassembl√©es en **5 cat√©gories** :  
            - CDI  
            - CDD  
            - Freelance  
            - Alternance  
            - Stage  \n
             (*) sans compter donc _les {int(unspecified_contracts)} annonces_ o√π le contrat n'est pas mentionn√© et qui ont donc √©t√© retir√©es du jeu de donn√©es.  \
            \n
            ##### La figure √† droite repr√©sente donc la r√©partition des {int(result['number_offer'].sum())} annonces restantes.'''
            st.markdown(details)

        with col1:
            fig2 = px.pie(result, values="number_offer", names="contracttype", 
                        color=result.number_offer, hole=0.3,
                        labels={'contracttype': 'Type de contrat ', 
                                'number_offer': 'Nombre d\'annonces '},
                        color_discrete_sequence=px.colors.sequential.Viridis_r)
            fig2.update_layout(title={'text': "Les 5 contrats possibles",
                                      'y':0.95,'x':0.5, 'xanchor': 'center',
                                      'yanchor': 'top'}, height=600)
            fig2.update_traces(marker = dict(line = dict(color = 'white', width = 1)))
            fig2.update_traces(textinfo='label+percent',hoverinfo='label', showlegend = False, rotation=180)
            st.plotly_chart(fig2, use_container_height=True, use_container_width=True)

    with tab4:
        #st.header("Quelle est la r√©partition g√©ographique des offres ?")

        type_presentation = st.radio(horizontal=True,
            label="Comment pr√©f√©rez-vous voir les annonces ?",
            options=["1. Une carte suivie d'un s√©lecteur de villes", "2. Une carte cliquable avec les annonces visibles √† c√¥t√©"],
            captions = ["La version plus moderne mais √† scroller", "Une version de plotly plus ancienne, mais un seul √©cran"])

        fig, offers_df = tab3_4.presentation()

        if type_presentation == "1. Une carte suivie d'un s√©lecteur de villes":
            tab3_4.tall_presentation(fig, offers_df)
        else:
            tab3_4.short_presentation(fig, offers_df)

    with tab5:
        table_to_display = st.selectbox("Quelle table souhaiteriez-vous voir ?",
                                        options=['Companies', 'Job Offers', 'JobOffer_Skills', 'Locations', 'Skills', 'Sources', 'Users'],
                                        placeholder="Job Offers")
        match table_to_display:
            case "Companies":
                st.dataframe(fetch_full_table("companies"))
            case "Job Offers":
                st.dataframe(fetch_full_table("joboffers"))
            case "JobOffer_Skills":
                st.dataframe(fetch_full_table("joboffer_skills"))
            case "Locations":
                st.dataframe(fetch_full_table("coordinates_full"))
            case "Skills":
                st.dataframe(fetch_full_table("skills"))
            case "Sources":
                st.dataframe(fetch_full_table("sources"))
            case "Users":
                st.write("That is our secret")
                #st.dataframe(get_user_from_postgresql())
